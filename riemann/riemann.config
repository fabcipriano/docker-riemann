; -*- mode: clojure; -*-
; vim: filetype=clojure

; Import
(require  '[facio.graph.elasticsearch :as es]
          '[facio.notifications.simpleslack :as sslack])

; Init logging. No file parameter, log to stdout.
(logging/init)

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Include all config files found in directory
(include "/etc/riemann/conf.d")

; Remove riemann events
(instrumentation {:enabled? false})

; Expire old events from the index every 10 seconds.
(periodically-expire 10 {:keep-keys [:host :service :tags, :state, :description, :metric]})

; Configure Streams Riemann
(let [index (index)]
(streams
  (default :ttl 60

  ; Index all events immediately
  index
    
  ;Send events to ELK
  (by :service
    (fn [event]
      (prn (str "--------INDEX------ " (es/formatindexes event)))
      ((elasticsearch {:es-endpoint "http://elasticmon:9200" :es-index (es/formatindexes event)}) event)))
  
  ;Send alarms of expired events to Slacker
  (expired
    (rollup 5 3600
      (fn [events]
        (prn (str "--- ALARM.: " (sslack/formatt_alarm_text events)))
        (sslack/simple_slack_api (sslack/formatt_alarm_text events))
        )))

  #(info %))))
